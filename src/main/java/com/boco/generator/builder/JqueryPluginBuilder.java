package com.boco.generator.builder;

import com.boco.generator.util.DateTimeUtil;
import com.boco.generator.util.StringUtil;

public class JqueryPluginBuilder {
	public static String buildJqueryPlugin(String pluginName){
		
		String nameFirstToUpper = StringUtil.firstToUpperCase(pluginName);
		StringBuilder builder = new StringBuilder();
		builder.append("/*******************************************************************************\n");
		builder.append("* jquery-").append(pluginName);
		builder.append(" v0.1 requires jQuery 1.11+\n");
		builder.append("* @author ").append(System.getProperty("user.name")).append("\n");
		builder.append("* @date ").append(DateTimeUtil.long2Str(System.currentTimeMillis(),"yyyy-MM-dd HH:mm:ss"));
		builder.append("\n* @version 0.1\n");
		builder.append("******************************************************************************/\n");
		builder.append("//support AMD\n");
		builder.append(";(function(factory) {\n");
		builder.append("	if (typeof define === 'function' && define.amd) {\n");
		builder.append("		// AMD. Register as an anonymous module.\n");
		builder.append("		define([ 'jquery' ], factory);\n");
		builder.append("	} else {\n");
		builder.append("		// Browser globals\n");
		builder.append("		factory(jQuery);\n");
		builder.append("	}\n");
		builder.append("}");
		builder.append("(function($) {\n");
		builder.append("	'use strict';\n");
		builder.append("	var ").append(nameFirstToUpper);
		builder.append(" = function(element, options) {\n");
		builder.append("		this.options = options;\n");
		builder.append("		this.$el = $(element);\n");
		builder.append("		this.init();\n");
		builder.append("	};\n");
		builder.append("	").append(nameFirstToUpper);
		builder.append(".DEFAULTS = {\n");
		builder.append("		//default settings\n");
		builder.append("	};\n");
		builder.append("	").append(nameFirstToUpper).append(".LOCALES = [];\n");
		builder.append("	").append(nameFirstToUpper).append(".LOCALES['zh-CN'] = ");
		builder.append(nameFirstToUpper).append(".LOCALES['cn'] = {};\n");
		builder.append("	$.extend(").append(nameFirstToUpper).append(".DEFAULTS,");
		builder.append(nameFirstToUpper).append(".LOCALES['zh-CN']);\n\n");
		builder.append("	// private function definition\n");
		builder.append("	").append(nameFirstToUpper).append(".prototype.init = function() {\n");
		builder.append("		console.log(\"init method invoked\");\n");
		builder.append("		//this.create();\n").append("	};\n");
		builder.append("	").append(nameFirstToUpper).append(".prototype.initLocale = function(){\n");
		builder.append("		if (this.options.locale) {\n");
		builder.append("			var parts = this.options.locale.split(/-|_/);\n");
		builder.append("			parts[0].toLowerCase();\n");
		builder.append("			parts[1] && parts[1].toUpperCase();\n");
		builder.append("			if ($.fn.").append(pluginName).append(".locales[this.options.locale]) {\n");
		builder.append("				// locale as requested\n");
		builder.append("				$.extend(this.options, $.fn.").append(pluginName).append(".locales[this.options.locale]);\n");
		builder.append("			} else if ($.fn.").append(pluginName).append(".locales[parts.join('-')]) {\n");
		builder.append("				// locale with sep set to - (in case original was specified with _)\n");
		builder.append("				$.extend(this.options, $.fn.").append(pluginName).append(".locales[parts.join('-')]);\n");
		builder.append("			} else if ($.fn.").append(pluginName).append(".locales[parts[0]]) {\n");
		builder.append("				// short locale language code (i.e. 'en')\n");
		builder.append("				$.extend(this.options, $.fn.").append(pluginName).append(".locales[parts[0]]);\n");
		builder.append("			}\n");
		builder.append("		}\n");
		builder.append("	};\n");
		builder.append("	").append(nameFirstToUpper).append(".prototype.create = function() {\n");
		builder.append("		//create something\n").append("	};\n");
		builder.append("	").append(nameFirstToUpper).append(".prototype.bindEvent = function() {\n");
		builder.append("		//bindle event;\n").append("	};\n\n");
		
		builder.append("	// public function definition\n");
		builder.append("	").append(nameFirstToUpper).append(".prototype.destroy = function() {\n");
		builder.append("		this.$el.removeData('").append(pluginName).append("');\n");
		builder.append("	};\n");
		builder.append("	// public definition\n");
		builder.append("	var methods = ['destroy'];\n");
		builder.append("	$.fn.").append(pluginName).append(" = function(option) {\n");
		builder.append("		var value;\n");
		builder.append("		var args = Array.prototype.slice.call(arguments, 1);\n");
		builder.append("		this.each(function() {\n");
		builder.append("			var $this = $(this);\n");
		builder.append("			var data = $this.data('").append(pluginName).append("');\n");
		builder.append("			var options = $.extend({},");
		builder.append(nameFirstToUpper).append(".DEFAULTS, $this.data(),\n");
		builder.append("				typeof option === 'object' && option);\n");
		builder.append("			if (typeof option === 'string') {\n");
		builder.append("				if ($.inArray(option, methods) < 0) {\n");
		builder.append("					throw new Error('Method ' + option\n");
		builder.append("					+ ' does not exist on jQuery-").append(pluginName);
		builder.append("');\n");
		builder.append("				}\n");
		builder.append("				if (!data) {\n");
		builder.append("					return;\n");
		builder.append("				}\n");
		builder.append("				value = data[option].apply(data, args);\n\n");
		builder.append("			}\n");
		builder.append("			if (!data) {\n");
		builder.append("				$this.data('").append(pluginName).append("',(data = new ").append(nameFirstToUpper);
		builder.append("(this, options)));\n");
		builder.append("			}\n");
		builder.append("		});\n");
		builder.append("		return typeof value === 'undefined' ? this : value;\n");
		builder.append("	};\n");
		builder.append("	$.fn.").append(pluginName).append(".Constructor = ").append(nameFirstToUpper).append(";\n");
		builder.append("	$.fn.").append(pluginName).append(".defaults = ").append(nameFirstToUpper).append(".DEFAULTS;\n");
		builder.append("	$.fn.").append(pluginName).append(".methods = methods;\n");
		builder.append("	$(function() {\n");
		builder.append("		$('[data-toggle=\"").append(pluginName).append("\"]').").append(pluginName).append("();\n");
		builder.append("	});\n");
		builder.append("}));");
		return builder.toString();
	}
}
